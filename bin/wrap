#!/usr/bin/perl
#
#  <wrap>
#    Copyright 2010 James Cook - All Rights Reserved.
#
#

use strict;
use Getopt::Std;

our %opts;
our $delim = qr/\s+/;

our $outWidth = 72;
our $col = 0;
our @wordBuf;

exit main();

sub HELP_MESSAGE {
    usage(0);
}
sub usage {
    my ($exitWith, $msg) = @_;
    
    if (defined $msg) {
        print STDERR $msg;
        print STDERR "\n";
    }

    print STDERR <<EOF;

    Usage:  wrap
    
    Options:
        -h          show this help message
        -w<width>   specify width to wrap input at (default = 72)
        -d<delims>  specify delimiter regex for wrapping (default = "\s+")

EOF
    exit $exitWith if defined($exitWith);
}

sub wrap {
    my @lines = @_;
    
    # split all the lines in @lines on $delim, placing the results into
    # one long list (@words)
    my @words;
    for my $line (@lines) {
        my @lineWords = split $delim, $line;
        @lineWords = grep {length $_ > 0} @lineWords;
        push @words, @lineWords;
    }
    
    # making use of the globals $col (output column position) and @wordBuf
    # (not-yet-returned words) iterate through @words, adding each word to
    # @wordBuf and flushing the @wordBuf into @lines every time a word would
    # put the $col position over $outWidth.
    @lines = ();
    for my $word (@words) {
        my $wLen = length $word;
        if ($wLen + $col >= $outWidth) {
            # flush @wordBuf and reset $col
            push @lines, flush();
        } else {
            # count one space
            $col++;
        }
        
        # record $word
        push @wordBuf, $word;
        $col += $wLen;
    }
    
    # return the list of lines that were completed by this batch of text
    return \@lines;
}

# reset @wordBuf and $col and return all the words in @wordBuf as a single line 
sub flush {
    my $outLine = join ' ', @wordBuf;
    
    @wordBuf = ();
    $col = 0;
    
    return $outLine
}

sub main {
    getopts("w:d:", \%opts) or usage(-1);
    usage(0)    if ($opts{'h'});
    usage(-1)   if (@ARGV > 0);
    
    $delim = qr/${opts{'d'}}/   if defined $opts{'d'};
    $outWidth = $opts{'w'}      if defined $opts{'w'};
    
    while(<STDIN>) {
        my @wrapped = @{ wrap($_) };
        map { print "$_\n" } @wrapped;
    }
    
    print (join " ", flush());
    print "\n";
    return 0;
}