#!/usr/bin/perl
#
#  <hsTemplate>
#    Copyright 2007 James Cook - All Rights Reserved.
#
#

use strict;

my ($file, $module) = @ARGV;

my $year = `date +%Y`;
chomp $year;

my $fullName = `fullName`;
chomp $fullName;

my $noExt = $file;
$noExt =~ s/.[Ll]?[Hh][Ss]$//;

if ($noExt eq $file) {
	$file = $file . ".hs"
}

my @moduleparts;

if (!defined($module)) {
	@moduleparts = split m{/}, $noExt;
} else {
	@moduleparts = split m{\.}, $module;
}

@moduleparts = grep {$_ ne ""} @moduleparts;
@moduleparts = map {ucfirst} @moduleparts;
@moduleparts = map {s/[^a-zA-Z0-9]/_/g; $_} @moduleparts;

$module = join ".", @moduleparts;

open OUTFILE, ">", $file;

if ($module eq "Main") {
	chmod 0755, $file;
}

if ($file =~ m/\.lhs$/i) {
print OUTFILE <<EOF
\\documentclass[10pt]{article}
%include polycode.fmt

\\begin{document}

\\title{\@$file\@}
\\author{$fullName}
\\date{$year}

\\maketitle

%if 0
\\begin{code}
	
	-- code in here won't end up in the TeX document
	module $module where
	
\\end{code}
%endif

\\begin{code}
        
        -- your code here
        
\\end{code}
	
\\end{document}
EOF
} else {
if ($module eq "Main") {
print OUTFILE "#!/usr/bin/env runhaskell\n";
}
print OUTFILE <<EOF
{-
 -	"$file"
 -	(c) $year $fullName
 -}

module $module where

EOF
}