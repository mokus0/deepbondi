#!/usr/bin/perl
#
#  <hsTemplate>
#    Copyright 2007 James Cook - All Rights Reserved.
#
#

use strict;

my ($file, $module) = @ARGV;

# strip extension, set default ext
$file =~ s/\.(l?hs(-boot)?)$//i;
my $ext = $1 || "hs";

# convert '.'s to '/'s in filename
$file =~ s{\.}{/}g;

# construct module name for import declaration;
#   use ARGV[2] ($module) if defined, otherwise use $file

my @moduleparts;

if (!defined($module)) {
	@moduleparts = split m{/}, $file;
} else {
	@moduleparts = split m{\.}, $module;
}

# mangle the name components to make sure they're valid haskell
# module identifiers
@moduleparts = grep {$_ ne ""} @moduleparts;
@moduleparts = map {ucfirst} @moduleparts;
@moduleparts = map {s/[^a-zA-Z0-9]/_/g; $_} @moduleparts;

$module = join ".", @moduleparts;

# create the enclosing directory if needed
open DIRNAME, "-|", "dirname", $file or die "Can't open `dirname` utility";
my $dirname = <DIRNAME>;
chomp $dirname;
close DIRNAME;

if (! -d $dirname) {
    system "mkdir", "-p", $dirname;
    
    die "Failed to make dir $dirname" if (! -d $dirname);
}

open OUTFILE, ">", "$file.$ext";

# get info that will appear in the output header comments
my $year = `date +%Y`;
chomp $year;

my $fullName = `fullName -n`;

# if this is a "Main" make it executable
if ($module eq "Main") {
	chmod 0755, $file;
}

# finally, write the file

if ($ext =~ m/lhs/i) {
print OUTFILE <<LITERATE_HASKELL
\\documentclass[10pt]{article}
%include polycode.fmt

\\begin{document}

\\title{\@$file\@}
\\author{$fullName}
\\date{$year}

\\maketitle

%if codeOnly || showAllCode
\\begin{code}
        
        -- code in here won't end up in the TeX document
        module $module where
        
\\end{code}
%endif

\\begin{code}
        
        -- your code here
        
\\end{code}
	
\\end{document}
LITERATE_HASKELL
} else {
if ($module eq "Main") {
print OUTFILE "#!/usr/bin/env runhaskell\n";
}
print OUTFILE <<HASKELL
{-
 -      ``$file''
 -      (c) $year $fullName
 -}

module $module where

HASKELL
}